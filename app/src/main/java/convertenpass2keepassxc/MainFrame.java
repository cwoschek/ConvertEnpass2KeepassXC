/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package convertenpass2keepassxc;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.InvalidParameterException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.io.FileUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author christoph
 */
public class MainFrame extends javax.swing.JFrame {

    private static final Logger LOG = Logger.getLogger(MainFrame.class.getName());

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonInputFile = new javax.swing.JButton();
        jButtonOutputFile = new javax.swing.JButton();
        jTextFieldInputFile = new javax.swing.JTextField();
        jTextFieldOutputFile = new javax.swing.JTextField();
        jButtonConvert = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabelInfo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Covert from EnPass to KeePass v1.0");

        jButtonInputFile.setText("Select...");
        jButtonInputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInputFileActionPerformed(evt);
            }
        });

        jButtonOutputFile.setText("Select...");
        jButtonOutputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOutputFileActionPerformed(evt);
            }
        });

        jTextFieldInputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldInputFileActionPerformed(evt);
            }
        });

        jButtonConvert.setText("Convert");
        jButtonConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConvertActionPerformed(evt);
            }
        });

        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jLabel1.setText("Input File:");

        jLabel2.setText("Output File:");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jLabelInfo.setText("info");
        jPanel1.add(jLabelInfo);

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(javax.swing.UIManager.getDefaults().getColor("Label.background"));
        jTextArea1.setColumns(40);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Application convert json-export file from EnPass to CSV-import file for keepass. Fields which cannot assigned to known fields are appended line by line to notes field. Category is used as group name.\nBy Christoph Woschek");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setAutoscrolls(false);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonOutputFile)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButtonInputFile, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(25, 25, 25)
                                        .addComponent(jButtonConvert)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(79, 79, 79))
                                    .addComponent(jTextFieldInputFile)
                                    .addComponent(jTextFieldOutputFile)))
                            .addComponent(jScrollPane1))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldInputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonInputFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldOutputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonOutputFile))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonConvert)
                    .addComponent(jButtonExit))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonOutputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOutputFileActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setFileFilter(new FileNameExtensionFilter("CSV file", "csv"));
        chooser.setDialogTitle("Select directory to store");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setAcceptAllFileFilterUsed(true);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            LOG.log(Level.INFO, "getCurrentDirectory(): {0}", chooser.getCurrentDirectory());
            LOG.log(Level.INFO, "getSelectedFile() : {0}", chooser.getSelectedFile());
            String temp = chooser.getSelectedFile().toString();
            if (!temp.endsWith(".csv"))
                temp += ".csv";
            jTextFieldOutputFile.setText(temp);
        } else {
            LOG.info("No Selection ");
        }
    }//GEN-LAST:event_jButtonOutputFileActionPerformed

    private void jButtonInputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInputFileActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setFileFilter(new FileNameExtensionFilter("JSON EnPass export file", "json"));
        chooser.setDialogTitle("Select directory to store");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setAcceptAllFileFilterUsed(true);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            LOG.log(Level.INFO, "getCurrentDirectory(): {0}", chooser.getCurrentDirectory());
            LOG.log(Level.INFO, "getSelectedFile() : {0}", chooser.getSelectedFile());
            jTextFieldInputFile.setText(chooser.getSelectedFile().toString());
        } else {
            LOG.info("No Selection ");
        }
    }//GEN-LAST:event_jButtonInputFileActionPerformed

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jTextFieldInputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldInputFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldInputFileActionPerformed

    private void jButtonConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConvertActionPerformed
        String content = null;
        File input = null;
        File output = null;
        try {
            jLabelInfo.setText("Converting...");
            input = new File(jTextFieldInputFile.getText());
            output = new File(jTextFieldOutputFile.getText());
            content = FileUtils.readFileToString(input, StandardCharsets.UTF_8);
            JSONObject jo = new JSONObject(content);
            Set<Item> items = importFile(jo);
            Set<ItemKeePass> outItems = convertItems(items);
            storeItems(output, outItems);
            jLabelInfo.setText("Finished.");
            JOptionPane.showMessageDialog(this, "Finished", "Converting", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            LOG.log(Level.SEVERE, null, ex);
            jLabelInfo.setText("Error.");
            JOptionPane.showMessageDialog(this, "Error", "Converting", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonConvertActionPerformed

    private Set<Item> importFile(JSONObject jo) {
        if (jo==null) throw new InvalidParameterException("no json file loaded");
        if (jo.length()==0) throw new InvalidParameterException("no item in json file");
        Set<Item> items = new HashSet<>();
        try {
            JSONArray objects = jo.getJSONArray("items");
            objects.forEach((t) -> {
                JSONObject object = (JSONObject)t;
                Item item = new Item();
                Set<String> itemFields = object.keySet();
                itemFields.stream().forEach((e) -> {
                    switch(e) {
                        case "title":
                            item.setTitle(object.getString("title"));
                            break;
                        case "category":
                            item.setCategory(object.getString("category"));
                            break;
                        case "note":
                            item.setNote(object.getString("note"));
                            break;
                        case "fields":
                            JSONArray fields = object.getJSONArray("fields");
                            final Set<Field> fieldMap = importFields(fields);
                            item.setFields(fieldMap);
                            break;
                        case "updated_at":
                            item.setUpdatedAt(Long.toString(object.getLong("updated_at")));
                            break;
                        case "icon":
                        case "auto_submit":
                        case "favorite":
                        case "subtitle":
                        case "template_type":
                        case "uuid":
                            // known, but not used
                            break;
                        default:
                            LOG.log(Level.WARNING, "Unknown item field: {0}", e);
                    }
                });
                items.add(item);
            });
        } catch(JSONException ex) {
            LOG.severe("key not found");
        }
        return items;
    }

    private Set<Field> importFields(JSONArray fields) {
        if (fields == null)
            throw new NullPointerException();

        Set<Field> fieldSet = new HashSet<>();
        try {
            fields.forEach((t) -> {
                JSONObject object = (JSONObject) t;
                Set<String> itemFields = object.keySet();
                final StringBuilder label = new StringBuilder();
                final StringBuilder type = new StringBuilder();
                final StringBuilder value = new StringBuilder();
                final StringBuilder valueUpdatedAt = new StringBuilder();
                itemFields.stream().forEach((String name) -> {
                    switch (name) {
                        case "label":
                            label.append(object.getString("label"));
                            break;
                        case "value":
                            value.append(object.getString("value"));
                            break;
                        case "type":
                            type.append(object.getString("type"));
                            break;
                        case "value_updated_at":
                            valueUpdatedAt.append(object.getLong("value_updated_at"));
                            break;
                        case "history":
                        case "order":
                        case "sensitive":
                        case "uid":
                        case "updated_at":
                            // known, but not used
                            break;
                        default:
                            LOG.log(Level.WARNING, "Unknown field name: {0}", name);
                    }
                });
                if (!value.toString().isEmpty())
                    fieldSet.add(new Field(label.toString(), type.toString(), value.toString(), valueUpdatedAt.toString()));
            });
        } catch (JSONException ex) {
            LOG.severe(ex.toString());
        }
        return fieldSet;
    }
    
    private Set<ItemKeePass> convertItems(Set<Item> items) {
        Set<ItemKeePass> outItems = new HashSet<>();
        items.stream().forEach((item) -> {
            //LOG.info(item.toString());
            final ItemKeePass i2 = new ItemKeePass(item.getCategory(), item.getTitle(), item.getNote());
            // collect fields with expected corresponding label
            List<Field> usernames = item.getFieldByType("username");
            List<Field> emails = item.getFieldByType("email");
            List<Field> passwords = item.getFieldByType("password");
            List<Field> urls = item.getFieldByType("url");
            // 
            if (usernames.size() == 1 && passwords.size() == 1) {
                i2.setUsername(usernames.get(0).getValue());
                i2.setPassword(passwords.get(0).getValue());
                //i2.setUpdated(passwords.get(0).getValueUpdatedAt());
                emails.stream().forEachOrdered((t) -> {
                    i2.appendNotes("Email: " + t.getValue());
                });
            } else if (usernames.isEmpty() && emails.size() == 1 && passwords.size() == 1) {
                i2.setUsername(emails.get(0).getValue());
                i2.setPassword(passwords.get(0).getValue());
                //i2.setUpdated(passwords.get(0).getValueUpdatedAt());
            } else if (usernames.isEmpty() && emails.isEmpty() && passwords.size() == 1) {
                i2.setPassword(passwords.get(0).getValue());
                //i2.setUpdated(passwords.get(0).getValueUpdatedAt());
            } else if (usernames.size()==1 && emails.isEmpty() && passwords.isEmpty()) {
                i2.setUsername(usernames.get(0).getValue());
                //i2.setUpdated(usernames.get(0).getValueUpdatedAt());
            } else if (usernames.isEmpty() && emails.size()==1 && passwords.isEmpty()) {
                i2.setUsername(emails.get(0).getValue());
                //i2.setUpdated(emails.get(0).getValueUpdatedAt());
            } else {
                usernames.stream().forEachOrdered((t) -> i2.appendNotes(t.getLabel() + ": " + t.getValue()));
                emails.stream().forEachOrdered((t) -> i2.appendNotes(t.getLabel() + ": " + t.getValue()));
                passwords.stream().forEachOrdered((t) -> i2.appendNotes(t.getLabel() + ": " + t.getValue()));
                LOG.log(Level.WARNING, "no username, email or password found: {0}", item.toString());
                LOG.info(i2.toString());
            }
            if (urls.size() == 1) {
                i2.setUrl(urls.get(0).getValue());
            } else {
                urls.stream().forEachOrdered((t) -> i2.appendNotes(t.getLabel() + ": " + t.getValue()));
                if (urls.size() > 1) {
                    LOG.log(Level.WARNING, "no unique URL: {0}", item.toString());
                    LOG.info(i2.toString());
                }
            }
            item.getFields().stream().forEach((field) -> {
                switch (field.getType()) {
                    case "username":
                    case "email":
                    case "password":
                    case "url":
                        break;
                    default:
                        i2.appendNotes(field.getLabel() + ": " + field.getValue());
                }
            });
            i2.setUpdated(item.getUpdatedAt());
            i2.setCreated(item.getUpdatedAt());
            outItems.add(i2);
        });
        return outItems;
    }
    
    private void storeItems(File output, Set<ItemKeePass> outItems) {
        try {
            List<String> lines = new ArrayList<>();
            lines.add(ItemKeePass.getHeaderline());
            outItems.stream().forEachOrdered((t) -> {
                lines.add(t.getDataline());
            });
            FileUtils.writeLines(output, StandardCharsets.UTF_8.toString(), lines, "\n");
        } catch (IOException ex) {
            LOG.log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConvert;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonInputFile;
    private javax.swing.JButton jButtonOutputFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelInfo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldInputFile;
    private javax.swing.JTextField jTextFieldOutputFile;
    // End of variables declaration//GEN-END:variables
}
